name: Build and Deploy Quarto Book

# This workflow builds the Quarto book and deploys it to GitHub Pages.
# The "build" job is triggered by pull requests, pushes to the main branch,
# releases (tags starting with "v", e.g., v2025.08), or manually,
# and ends with uploading the book artifact.
# The "deploy" job is only triggered by pushes to main and releases.
# It copies the book artifact to an appropriate folder in the gh-pages branch,
# e.g., v2025.08 for a release or dev for pushes to main. It also
# creates a redirect file pointing the home page to the "latest/" folder,
# which always points to the most recent release if available,
# or to dev/ otherwise.

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
  workflow_dispatch:

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: neuroinformatics-unit/actions/lint@v2

  build:
    name: Build Quarto book
    runs-on: ubuntu-latest
    defaults:
      run:
        # use a login shell to ensure conda is activated
        # and the correct python is used by quarto
        shell: bash -el {0}
    needs: linting
    outputs:
      book-artifact: book-${{ github.sha }}
    steps:
      - name: Cache sample data
        uses: actions/cache@v4
        with:
          path: |
            ~/.movement/*
          key: cached-sample-data
          restore-keys: cached-sample-data

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download Smart-Kages data from Dropbox
        run: |
          curl -L https://www.dropbox.com/scl/fi/0levhgg6fpclhqos14zgz/Smart-Kages.zip?rlkey=e2x9i0gvxpv00t0ppzkezvp3n&st=nyufmg8u&dl=1 -o ~/.movement/Smart-Kages.zip
          unzip ~/.movement/Smart-Kages.zip
          ls -R ~/.movement/Smart-Kages

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment-dev.yaml
          activate-environment: animals-in-motion-env
          channel-priority: strict
          channels: conda-forge

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Render book
        env:
          # Make sure to quarto usese the activated conda environment
          QUARTO_PYTHON: ${{ env.CONDA }}/envs/animals-in-motion-env/bin/python
        run: |
          echo "Using QUARTO_PYTHON=$QUARTO_PYTHON"
          quarto render book --execute    

      - name: Upload rendered book using artifact.ci
        id: artifactci-upload
        uses: mmkal/artifact.ci/upload@main
        with:
          name: book-${{ github.sha }}
          path: book/_book/*

      - name: Print book preview URL to step summary
        shell: bash
        run: |
          echo "Preview docs at ${{ steps.artifactci-upload.outputs.artifactci-run-url }}, " >> $GITHUB_STEP_SUMMARY
          echo "under the _Detected Entrypoints_ section (requires GitHub sign-in)" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))) || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      # If the ref is a tag, destination_dir has a release version number
      # Otherwise, destination_dir is called "dev"
      - name: Determine deploy context
        id: context
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "destination_dir=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "destination_dir=dev" >> $GITHUB_OUTPUT
          fi

      - name: Download book artifact
        uses: actions/download-artifact@v4
        with:
          name: book-${{ github.sha }} 
          path: downloaded-artifact

      - name: Upload to appropriate folder
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: downloaded-artifact/book/_book
          destination_dir: ${{ steps.context.outputs.destination_dir }}

      # Clone gh-pages branch
      - name: Clone gh-pages branch
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git clone --depth 1 --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages
      
      # Check if any release folders exist yet
      - name: Check if any releases exist
        id: gh-pages-meta
        run: |
          if ls -d gh-pages/v* 2>/dev/null | grep -q .; then
            echo "releases_exist=true" >> $GITHUB_OUTPUT
          else
            echo "releases_exist=false" >> $GITHUB_OUTPUT
          fi
      

      - name: Ensure CNAME file is present in gh-pages root
        run: echo "animals-in-motion.neuroinformatics.dev" > gh-pages/CNAME

      # Copy release contents to "latest"
      # If no releases exist, "dev" is copied to "latest"
      # The gh-pages branch root already contains an index.html file that redirects to latest/
      - name: Copy to latest
        if: steps.context.outputs.is_release == 'true' || (steps.context.outputs.is_release == 'false' && steps.gh-pages-meta.outputs.releases_exist == 'false')
        run: |

          cd gh-pages
          echo "Copying ${{ steps.context.outputs.destination_dir }} to latest/"
          rm -rf latest
          cp -r ${{ steps.context.outputs.destination_dir }} latest

          git add latest index.html CNAME
          git commit -m "Update latest/ to ${{ steps.context.outputs.destination_dir }}" || echo "No changes to commit"
          git push
